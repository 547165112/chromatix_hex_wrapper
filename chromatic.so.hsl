#include "standard-types.hsl"

#pragma enumsize(4)
#pragma ptrsize(4)
#pragma byteorder(little_endian)

#pragma displayname("Elf (*.so)") ;
#pragma fileextensions(".so") ;

struct trigger_point_type
{
	float gain_start;      ///< Gain based trigger point.
	float gain_end;        ///< Gain based end point.
	long lux_index_start; ///< Lux index based trigger point.
	long lux_index_end;   ///< Lux index based end point.
};

struct trigger_point_type_with_f
{
	struct trigger_point_type trigger_points;
	/* Fmin */
	/* Fmax */
	/* Lowlight Fmin */
	/* Lowlight Fmax */
	ubyte fvalues[4];

};

struct ExposureTableEntry
{
	long gain_val;
	long multiplikator;
};

struct ExposureTable
{
	long Use_Digital_Gain;
	
	long Max_Exposure_Table_entries;
	struct ExposureTableEntry entrys[Max_Exposure_Table_entries];
	__verify(Max_Exposure_Table_entries >  0) ;
	__verify(Use_Digital_Gain < 2 && Use_Digital_Gain >= 0) ;
};

struct AEC_Bright_Region
{
	long IsSupported;
	float Reduction;
	long Threshold_Low;
	long Lux_Index_Low;
	long Threshold_High;
	long Lux_Index_High;
	float Discard_Ratio;
};

struct fourLongArray
{
	long values1;
	long values2;
	long values3;
	long values4;
};

struct Light_parameters
{
	word redchan12bitvalues[3];
	word emtpy;
	float redchanfloats[2];

	word greenchan12bitvalues[3];
	word empty;
	float greenchanfloats[2];
	float greenchanfloats2[2];

	word bluechan12bitvalues[3];
	word empty;
	float bluechanfloats[2];

	float positiveTable[16];
	float negativeTable[8];
};

struct luma_light_parameters
{
	word Thresholds[3];
	word empty;
	float Scale_Factors[2];

	float positiveTable[16];
	float negativeTable[8];
};

struct badpixel_offset
{
	word normal_light[8];
	word low_light[8];
};

struct Feature
{
	long Control_Method;
	struct trigger_point_type_with_f lowlighttrigger;
	struct badpixel_offset offset;
};

struct Color_Conversion
{
	float matrix_a_d[8];
	word matrix_k[2];
	float matrix_v[3];
	long k;
};

struct Extraction_Factor_Setting
{
	byte factor1[6];
	byte empty[2];
	float factor2[2];
	byte factor3[2];
	byte empty[2];
}; 

struct mce_color
{
	ubyte y[4];
	float boost_factor;
	byte cr_boundary;
	byte cb_boundary;
	byte cr_transition_width;
	byte cb_transition_width;
	word bright_index;
	word dark_index;
};

struct noise_profile
{
	float triggervalue;
	float matrix[24];
	float Denoise_Scale_Y[4];
	float Denoise_Scale_Chroma[4];
	float Denoise_Edge_Softness_Y[4];
	float Denoise_Edge_Softness_Chroma[4];
	float Denoise_Weight_Y[4];
	float Denoise_Weight_Chroma[4];
	long SW_Denosie_Edge_Threshold_Y;
	long SW_Denosie_Edge_Threshold_Chroma;
};

struct noise_profile_type
{
	long enable;
	long controle_method;
	struct noise_profile profile1;
	struct noise_profile profile2;
	struct noise_profile profile3;
	struct noise_profile profile4;
	struct noise_profile profile5;
	struct noise_profile profile6;
};

struct temporal_noise_profile
{
	float triggervalue;
	float noiseprofile[3];
	float Denoise_Scale_Y; 
	float Denosie_Scale_Chroma;
};

struct cct_trigger
{
	long start;
	long end;
};

struct Triangle
{
	long triangle[6];
};

struct Triangles
{
	struct Triangle triangle1;
	struct Triangle triangle2;
	struct Triangle triangle3;
	struct Triangle triangle4;
	struct Triangle triangle5;
};

struct AWB_Stats_Profile
{
	ubyte YMin;
	ubyte YMax;
	byte Slope_of_neutral_region_and_line_number[4];
	//Cb intercept of neutral region and line number
	ushort one;
	word two;
	ushort three;
	ushort four;
};

struct AWB_Gain_Adjust
{
	float d65[2];
	float d75[2];
	float A[2];
	float TL84[2];
	float cw[2];
	float horizon[2];
	float d50[2];
	float cust_flo[2];
	float noon[2];
	float daylight[2];
	float cust_a[2];
	float u30[2];
};

struct LUTTable
{
	long LuxIndex;
	float GreenRGOffsetAdj;
	float GreenBGOffsetAdj;
	float OutlierDistAdj;
};

struct LEDTABLE
{
	short CCT;
	short LEDConf1;
	short LEDconf2;
};

struct AWBMotionSensor
{
	float GyroTrigger;
	float AccelerometerTrigger;
	float MagnetometerTrigger;
	float DISMotionVectorTrigger;

	struct LED_Strobe
	{
		float LED_StrobeAdjustmentFactor;
		short LowlightToggleEnable;
		short InterpolateGainAdjEnable;
		struct LowlightLUT
		{
			long enable;
			struct LUTTable entry0;
			struct LUTTable entry1;
			struct LUTTable entry2;
			struct LUTTable entry3;
			struct LUTTable entry4;
			struct LUTTable entry5;
		};
	};
};

struct libchromatix
{
	blob  elfheader[4100];
	/* Chromatix common DMSS header file version number */
	long chromatix_version_type;
	long Revision;

	long Control_Method;
	struct trigger_point_type black_level_subtractiot_trigger_points;

	//dont know what these values are lookslike they are packed
	blob unkown[4 *3];

	/* Channel Balance Gains */ 
	float chan_balance_gains[4] ;
	/* Adaptive Bayer Filter 2 */
	word control_method; //values must extracted to two 16bit
	word lux_index;
	/* ABF2 Low Light Trigger Points */
	struct trigger_point_type ABF2_Low_Light_trigger_points;
	/* ABF2 Bright Light Trigger Points */
	struct trigger_point_type ABF2_Bright_Light_trigger_points;

	struct Light_parameters ABF2_Low_Light_parameters;
	struct Light_parameters ABF2_Normal_Light_parameters;
	struct Light_parameters ABF2_Bright_Light_parameters;

	struct Feature badpixelcorrection;

	struct Feature badclustercorrection;

	/* Demosaic3 */
	struct demosaic
	{
		long control;
		struct trigger_point_type demosaic_lowlight_trigger_points;
		/* Demosaic LUT */
		float wk[18];
		long bk[18];
		long lk[18];
		long Tk[18];
		float aG[2];
		float bl[2];
	};

	struct Chroma_and_Luma_Filters
	{
		long control_method;
		struct trigger_point_type lowLight_trigger_points;
		long Enableindex;
		/* Filters */
		/* Lowlight Chroma Filter */
		/* H */
		float h[4];
		/* V */
		float v[2];
		/* Normal Light Chroma Filter */
		float h[4];
		/* V */
		float v[2];
		long control_method;
		//Feature name : Luma filter low light trigger points.
		struct trigger_point_type lowLight_trigger_points;

		struct trigger_point_type brightLight_trigger_points;
		/* Enable Index bright light */
		long enable; 

		struct luma_light_parameters luma_low_light_parameters;
		struct luma_light_parameters luma_normal_light_parameters;
		struct luma_light_parameters luma_bright_light_parameters;
	};

	struct ColorCorrection
	{
		long ControlMethod;
		struct trigger_point_type trigger_points;

		long cct_start;
		long cct_end;

		long cct_d65_start;
		long cct_d65_end;

		float cct_flash_start;
		float cct_flash_end;

		float cct_strobe_start;
		float cct_strobe_end;

		float D65_Color_Correction[13];
		float A_Color_Correction[13];
		float Outdoor_Color_Correction[13];
		float LED_Flash_Color_Correction[13];
		float Strobe_Flash_Color_Correction[13];
		float UnkownField[12];
	};

	struct GammaTables
	{
		long Control_Method;
		struct trigger_point_type low_light_trigger_points;
		struct trigger_point_type outdoor_trigger_points;
		ubyte Normal_light_gamma[64];
		ubyte Lowlight_light_gamma[64];
		ubyte Bright_light_gamma[64];
	};

	struct Color_Conversion
	{
		long Control_Method;
		struct trigger_point_type low_light_trigger_points;
		long CCT_Trigger[2]; //start &end
		long D65_CCT_Trigger[2];//start &end
		struct Color_Conversion TL84_Color_Conversion;
		struct Color_Conversion A_Color_Conversion;
		struct Color_Conversion D65_Color_Conversion;
		struct Color_Conversion Yhi_Ylo_Color_Conversion;
		struct Color_Conversion Outdoor_Color_Conversion;
		struct Color_Conversion Monochrome_Color_Conversion;
		struct Color_Conversion Sepia_Color_Conversion;
		struct Color_Conversion Negative_Color_Conversion;
		struct Color_Conversion Aqua_Color_Conversion; 
		float Saturated_Color_Conversion_Factor;
	};

	struct _5x5_ASF
	{
		long control_method;
		struct trigger_point_type low_light_trigger_points;
		struct trigger_point_type outdoor_trigger_points;
		long filtermode;
		float normalize_factor1;
		float normalize_factor2;
		short _5x5_Filter_1[25];
		short _5x5_Filter_2[25];
		long Extraction_Factor;
		struct Extraction_Factor_Setting lowlight;
		struct Extraction_Factor_Setting normallight;
		struct Extraction_Factor_Setting brightlight;
		float Soft_Focus_Degree;
		float _5x5_Sharp_Min_DS_Factor;
		float _5x5_Sharp_Max_DS_Factor;
		float _5x5_Sharp_Max_Factor;
	};

	struct _7x7_ASF
	{
		long control_method;
		struct trigger_point_type low_light_trigger_points;
		struct trigger_point_type bright_light_trigger_points;
		long enable;
		//3x3 Smooth Percentage
		word lowlight;
		word normallight;
		word brightlight;
		word empty;
		long Enable_Special_Effects;
		long neg_abs_y1;
		long negmatrix[3]; /* nz [0] for F1, [1] for F2, [2] for F3 and F4 */
		struct F1{
			float lowlight[16];
			float normallight[16];
			float brightlight[16];
		};
		struct F2
		{
			float lowlight[16];
			float normallight[16];
			float brightlight[16];
		};
		struct F3{
			float lowlight[16];
			float normallight[16];
			float brightlight[16];
		};
		struct F4{
			float lowlight[16];
			float normallight[16];
			float brightlight[16];
		};
		struct F5{
			float light[16];
		};
		struct H_Lut1
		{
			float lowlight[24];
			float normallight[24];
			float brightlight[24];
		};
		struct V_Lut2
		{
			float lowlight[24];
			float normallight[24];
			float brightlight[24];
		};
		long Enable_Dynamic_Clamping[3];
		float smax[3];
		long omax[3];
		float smin[3];
		long omin[3];
		long reg_hh[3];
		long reg_hl[3];
		long reg_vh[3];
		long oreg_vlmin[3];
		struct lut3
		{
			loat lowlight[12];
			float normallight[12];
			float brightlight[12];
		};
		float Soft_Focus_Degree;
		float Sharp_Min_DS_Factor;
		float Sharp_Max_DS_Factor;
		float Sharp_Max_Factor;
	};

	struct Luma_Adaptation
	{
		long enable;
		long controle_method;
		struct trigger_point_type low_light_trigger_points;
		byte Indoor_Luma_Adaptation[5];
		byte empty;
		byte Outdoor_Luma_Adaptation[5];
		byte empty;
		long Luma_Target_Adjust;
	};

	struct Chroma_Suppression_Memory_Color_Enhancement
	{
		long control_method;
		struct trigger_point_type low_light_trigger_points;
		ubyte Low_Light_Chroma_Suppression[6];
		ubyte Chroma_Suppression[6];
		//Chroma threshold for strong chroma suppression
		ubyte Chroma_Thresh_BW;
		ubyte Chroma_Thresh_Color;
		ubyte empty[2];

		struct Memory_Color_Enhancement
		{
			struct mce_color green;
			struct mce_color blue;
			struct mce_color red;
		};
	};

	struct WavletDenoise
	{
		struct noise_profile_type Wavelet_Noise_SW_420;
		struct noise_profile_type Wavelet_Noise_SW_422;
		struct noise_profile_type Wavelet_Noise_HW_420;
		struct noise_profile_type Wavelet_Noise_HW_422;
	};

	struct Wavelet_Temporal_Noise
	{
		long index;
		long control_methode;
		struct temporal_noise_profile profile1;
		struct temporal_noise_profile profile2;
		struct temporal_noise_profile profile3;
		struct temporal_noise_profile profile4;
		struct temporal_noise_profile profile5;
		struct temporal_noise_profile profile6;
		long Algorithm; /* Algorithm Select, 0 power function, 1 Gaussian, 2 local linear minimum mean-squared error */
	};

	struct Skin_Color_Enhancement
	{
		long enable;
		long control_method;
		struct trigger_point_type low_light_trigger_points;
		struct cct_trigger A_CCT_Trigger;
		struct cct_trigger D65_CCT_Trigger;
		struct Triangles TL84_Origin_Triangles;
		struct Triangles TL84_Destination_Triangles;
		float TL84_Shift_Vector[2];
		float Outside_Region_Mapping[6];
		struct Triangles A_Origin_Triangles;
		struct Triangles A_Destination_Triangles;
		float A_Shift_Vector[2];
		struct Triangles D65_Origin_Triangles;
		struct Triangles D65_Destination_Triangles;
		float D65_Shift_Vector[2];
	};

	struct Statistics_Configuration
	{
		struct  AWB_Stats
		{
			struct AWB_Stats_Profile lowlight;
			struct AWB_Stats_Profile normallight;
			struct AWB_Stats_Profile outdoorlight;
			word emtpy;
		};

		struct Auto_Flicker_Detection
		{
			long Row_Sum_Enable;
			float Row_Sum_offset_ratio[4];
			long V_Subsample_Ratio;
			long Col_Sum_Enable;
			float Col_Sum_offset_ratio[4];
			long Col_Sum_H_Subsample_Ratio;
		};

		struct Bayer_Histogram_Config
		{
			float Bayer_Histogram_Statistics[4];
			//Bayer Grid Config
			ubyte Saturation[4]; //R, GR, GB, B
			float Offset[4];
			word num_regions[2];
			/* Bayer Exp Window */
			ubyte Saturation[4]; //R, GR, GB, B
			float Offset[4];
			word num_regions[2];
		};
		struct Skintone_Detection
		{
			float factors[8];
			long Percentage;
		};
	};

	struct Manual_Whitebalance
	{
		float TL84_Whitebalance_RGB[3];
		float D50_Whitebalance_RGB[3];
		float A_Whitebalance_RGB[3];
		float D65_Whitebalance_RGB[3];
		float Strobe_Flash_Whitebalance_RGB[3];
		float LED_flash_Whitebalance_RGB[3];
		long Auto_Whitebalance;

		struct AWB_Reference_Points_w_HW
		{
			float D65_AWB_Reference_Point[2];
			float Shade_AWB_Reference_Point[2];
			float A_AWB_Reference_Point[2];
			float TL84_AWB_Reference_Point[2];
			float CoolWhite_AWB_Reference_Point[2];
			float Horizon_AWB_Reference_Point[2];
			float D50_AWB_Reference_Point[2];
			float Custom_Flour_AWB_Reference_Point[2];
			float Noon_AWB_Reference_Point[2];
			float Custom_Daylight_AWB_Reference_Point[2];
			float Custom_A_AWB_Reference_Point[2];
			float U30_AWB_Reference_Point[2];
		};
		float LED_Gain_Adjust[2];
		float Strobe_Gain_Adjust[2];

		struct AWB_Gain_Adjust awb_gain_adjust;
		struct AWB_Gain_Adjust lowlight_awb_gain_adjust;
		long indoor_index;
		long outdoor_index;
		float Snow_Blue_Gain_Adj_Ratio;
		float Beach_Blue_Gain_Adj_Ratio;
		long Outlier_Distance;
		long Green_Zone_Offset_RG;
		long Green_Zone_Offset_BG;
		long Num_Frames_to_skip_after_changing_VFE;
		float AWB_Extreme_RG_Ratio_Treshold;
		float AWB_Extreme_BG_Ratio_Treshold;
		word CompactClusterR2;
		word CompactClusterToRefPointR2;
		ubyte AClusterThreshold;
		ubyte FClusterThreshold;
		ubyte DayClusterThreshold;
		ubyte OutdoorGreenThreshold;
		ubyte OutdoorGreenThresholdBrightF;
		ubyte OutdoorGreenThresholdDarkF;
		ubyte DayClusterThresholdForF;
		ubyte unkown[9];

		float AWBMinGainsRGB[3];
		float AWBMaxGainsRGB[3];
		float AWBSampleInfluence__Outdoor_Indoor[2];
		struct AWB_Weight_Vector
		{
			long AWB_Weight_Vector_D65[3];
			long AWB_Weight_Vector_D75[3];
			long AWB_Weight_Vector_A[3];
			long AWB_Weight_Vector_Warm_F[3];
			long AWB_Weight_Vector_Cool_F[3];
			long AWB_Weight_Vector_Horizon[3];
			long AWB_Weight_Vector_D50[3];
			long AWB_Weight_Vector_Cust_F[3];
			long AWB_Weight_Vector_Daylight_Noon[3];
			long AWB_Weight_Vector_Custom_Daylight[3];
			long AWB_Weight_Vector_Custom_A[3];
			long AWB_Weight_Vector_U30[3];
			long AWB_Weight_Vector_DayLine_1[3];
			long AWB_Weight_Vector_DayLine_2[3];
			long AWB_Weight_Vector_FLine[3];
			long AWB_Weight_Vector_ALine_1[3];
			long AWB_Weight_Vector_ALine_2[3];
		};
		long AWB_White_World_Y_Min_Ratio;

		long AWB_Aggressiveness;
		long AWB_Self_Calibrate;

		float AWBSelfCalibrateAdjustRatioHigh;
		float AWBSelfCalibrateAdjustRatioLow;

		ubyte AWB_Enable_Lock_Heuristics_1;
		ubyte AWB_Enable_Lock_Heuristics_2;
		ubyte AWB_Enable_Lock_Heuristics_3;
		ubyte IndoorDaylightLockEnable;

		long AWBEnableWhiteWorld;

	};

	struct AWB_Extended
	{
		long enable;
		long control_method;
		struct trigger_point_type trigger_points;
		float SkyPreventionBGThresh;
		ubyte AWBYminLowThreshold;
		ubyte AWBYmaxLowThreshold;
		ubyte empty[2];
	};

	struct AWB_golden_module_calibration_data
	{
		float R_Gr[12];
		float Gb_Gr[12];
		float B_Gr[12];
		long  EnableAWBModuleCal;
	};
	struct AWBMotionSensor goldenmodule_awbMoitionSensor;
	struct MatchLEDLevel
	{
		long TableSize; 
		struct LEDTABLE entry0;
		struct LEDTABLE entry1;
		struct LEDTABLE entry2;
		struct LEDTABLE entry3;
		struct LEDTABLE entry4;
		struct LEDTABLE entry5;
		struct LEDTABLE entry6;
		struct LEDTABLE entry7;
		struct LEDTABLE entry8;
		struct LEDTABLE entry9;
		struct LEDTABLE entry10;
		struct LEDTABLE entry11;
		struct LEDTABLE entry12;
		struct LEDTABLE entry13;
		struct LEDTABLE entry14;
		struct LEDTABLE entry15;
	};
	struct BayerAWBParams
	{
		struct AWB_Reference_Points_w_HW
		{
			float D65AWBReferencePoint[2];
			float ShadeAWBReferencePoint[2];
			float A_AWBReferencePoint[2];
			float TL84AWBReferencePoint[2];
			float CoolWhiteAWBReferencePoint[2];
			float HorizonAWBReferencePoint[2];
			float D50AWBReferencePoint[2];
			float CustFlourAWBReferencePoint[2];
			float NoonAWBReferencePoint[2];
			float CustDaylightAWBReferencePoint[2];
			float CustA_AWBReferencePoint[2];
			float U30AWBReferencePoint[2];
		};
		float LEDGainAdjst[2];
		float StrobeGainAdjst[2];
		struct AWB_Gain_Adjust awb_gain_adjust;
		struct AWB_Gain_Adjust awb_gain_lowlight_adjust;

		long IndoorIndex;
		long OutdoorIndex;

		float SnowBlueGainAdjRatio;
		float BeachBlueGainAdjRatio;

		long OutlierDistance;
		long GreenZoneOffsetRG;
		long GreenZoneOffsetBG;
		long NumFramestoskipafterchangingVFE;

		float AWB_Min_Gains_RGB[3];
		float AWB_Max_Gains_RGB[3];
		long AWBAggressiveness;
		long AWBSelfCalibrate;

		float AWBSelf_Calibrate;
		float AWBSelfCalibrateAdjustRatioLow;

		struct Purple_Prevent
		{
			long enable;
			long control_method;
			struct trigger_point_type trigger_points;
			float SkyPreventionBGThresh;
			long enableAWBModuleCal;
		};

		struct AWBMotionSensor AWB_motion_sensor_type_to_aide_AWB_in_determining_a_change_in_scene;

	};
};

function aligneStructures
{
	UQWord pos = 0 ;
	UQWord end = __getDocSize() ;
	while(pos < end)
	{
		UQWord t = __addStructureAt(pos, "ExposureTable", "");
		if(t == 0)
		pos += 4;
		if(t > 0)
		pos += t;
	};
};

function FindChromatixVersion
{
	UQWord pos = 0 ;
	UQWord end = __getDocSize() ;
	while(pos < end)
	{
		if(__getUDWordAt(pos) == 0x01030000)
		{
			__addStructureAt(pos, "libchromatix", "");
		}
		else
		{ 
			pos += 8;
		};
	};
};


function FindAllPossibleExposureTables
{
	UQWord pos = 0 ;
	UQWord end = __getDocSize();
	UDWord val;
	UDWord val2;
	while(pos < end)
	{
		val = __getUDWordAt(pos);
		val2 = __getUDWordAt(pos + 8);
		if((val == 0 || val == 1) && val2 > 100 && val2 < 900 )
		{
			__addStructureAt(pos, "ExposureTable", "");
			
		};
		pos+=8;
	};
};
